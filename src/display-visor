#!/bin/bash

version="0.5"
notif_header_outputchange="Monitor settings change"

screen0=eDP1
screen0full=eDP-1
screen1=DP22
screen1full=DP-2-2

usage ()
{
    echo "Usage: display-visor [-h] [-f] [-i] [-l [switch]] [-n] [-e] [-0 [screen]] [-1 [screen]] [-2 [screen]] [-v]

    -h, --help  Print this help.
    -i, --i3    Test for i3wm instance.
                         For avoiding conflict with multiple environments.
    -l, --lid   Check laptop lid status.
                         Ignored/Assumed closed if not given.
                         It is possible to specify switch. Defaults to 'LID'
                         If unsure, look under /proc/acpi/button/lid/...
    -n, --notif Issue a notification on each monitor change.
                         This uses notify-send over dbus. Notification daemon has to be running.
    -e, --noecho    Don't echo each monitor change.
    -0, --screen0   Specify new name for screen 0 (default: eDP1).
    -1, --screen1   Specify new name for screen 1 (default: DP4).
    -v, --version   Print version info.

 Useful for setting monitor layouts on system login/resume/hotplug
 when using window managers that do not handle display settings.

 Depends on xorg-xrandr and acpid."
}

handle_args ()
{
    while [ "$1" != "" ]; do
        case $1 in
            -h | --help )       usage
                                exit;;
            -i | --i3 )         i3test=true;;
            -l | --lid )        lidtest=true
                                if [ "${2:0:1}" == - -o -z "$2" ]; then
                                    lidswitch=LID
                                else
                                    lidswitch=$2
                                    shift
                                fi
                                check_lid_status;;
            -n | --notif )      notification=true;;
            -e | --noecho )     noecho=true;;
            -0 | --screen0 )    screen0full=$2 # full display name for xrandr
                                screen0=$(echo $2 | tr -d '-') # rm dashes to use as bash variable name
                                shift;;
            -1 | --screen1 )    screen1full=$2
                                screen1=$(echo $2 | tr -d '-')
                                shift;;
            -v | --version )    echo "display-visor v$version"
                                exit;;
            * )                 usage
                                exit 1;;
        esac
        shift
    done
}

# error handling
handle_err ()
{
    # test for running Xorg server
    if [ -z "$(ps -C Xorg --no-headers)" ]; then
        user_output "$prefix No Xorg server found. Exiting..."
        exit 1
    fi

    # test for running instance of i3
    if [ "$i3test" == "true" -a -z "$(ps -C i3 --no-headers)" ]; then
        user_output "$prefix i3wm not running. Exiting..."
        exit 1
    fi

    # test for valid laptop lid status
    if [ "$lidtest" == "true" -a -z "$lidstatus" ]; then
        user_output "$prefix Laptop lid switch $lidswitch not found. Exiting..."
        exit 1
    fi
}

# check lid status
check_lid_status ()
{
    lidstatus=$(cat /proc/acpi/button/lid/$lidswitch/state 2>/dev/null | awk '{print $NF}')
}

# user output
user_output ()
{
    if [ "$1" ]; then
        if [ -z "$noecho" ]; then
            echo $prefix $1
        fi
        if [ "$2" == "1" -a "$notification" ]; then
            notify-send -u low -a "display-visor" "$3" "$1"
        fi
    fi
}

# declare output devices
declare_outputs ()
{
    devices=$(xrandr | grep " connected" | cut -f 1 -d " ")
    while read dev ; do
        if [ $(expr match  $dev "HDMI") != "0" ]; then
            dev=HDMI${dev#HDMI-?-}
        else
            dev=$(echo $dev | tr -d '-')
        fi

        user_output "$dev connected"
        declare -gA $dev="yes"
    done <<< "$devices"
}

# configure monitors for closed lid
config_closed_lid ()
{
    if [ "$lidstatus" == "closed" ]; then
        user_output "Laptop lid is closed."
    elif [ "${!screen0}" -a -z "$lidtest" ]; then
        user_output "Laptop display will be ignored unless -l option is set."
    fi
    if [ "${!screen1}" ]; then
        user_output "SETTING: $screen1full (Primary)." 1 "$notif_header_outputchange"
        xrandr --output $screen0full --off \
               --output $screen1full --auto --primary
    else
        user_output "No external monitors are plugged in." 1 "$notif_header_outputchange"
        xrandr --output $screen0full --auto --primary \
               --output $screen1full --off
    fi
}

# configure monitors for open lid
config_open_lid ()
{
    user_output "Laptop lid is open."
    if [ "${!screen1}" ]; then
        user_output "$screen1full is plugged in."
        user_output "SETTING: $screen1full (Primary) - $screen0full (Left)." 1 "$notif_header_outputchange"
        xrandr --output $screen1full --auto --primary \
               --output $screen0full --auto --left-of $screen1full
    else
        user_output "No external monitors are plugged in." 1  "$notif_header_outputchange"
        xrandr --output $screen0full --auto --primary \
               --output $screen1full --off
    fi
}

# main configuration function
configure_displays ()
{
    handle_err
    
    check_lid_status

    declare_outputs

    if [ -z "$lidstatus" -o "$lidstatus" == "closed" ]; then
        config_closed_lid
    elif [ "$lidstatus" == "open" ]; then
        config_open_lid
    fi

    # FIXME: prevent segfault occurring from simultanious signals -- Issue #5 --
    sleep 2
}

#-----------#
#   Begin   #
#-----------#
# set exit signal trap
trap "echo 'Received interrupt. Exiting...' ; exit" SIGHUP SIGINT SIGQUIT

# log output
prefix='[ display-visor: ]:'
exec 1> >(logger -s -t "display-visor") 2>&1

# handle arguments
handle_args "$@"

# configure displays upon initialization
configure_displays

# set reconfigure trap
trap "echo 'Received signal. Reconfiguring displays.' ; configure_displays" RTMIN+5

# wait for signals
while :
do
    sleep 60 &
    wait
done
